import logging
from datetime import date, timedelta

from aiogram import Router, F, html
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback

from states import ReportStates
from keyboards import get_reports_menu_keyboard, get_admin_menu_keyboard
from database import get_sales_summary_for_period, get_sold_items_details_for_period
from constants import (
    CURRENCY_SYMBOL, REPORTS_MENU_TEXT, SALES_TODAY_TEXT,
    SALES_YESTERDAY_TEXT, SALES_PERIOD_TEXT, BACK_TO_ADMIN_MAIN_MENU_TEXT
)

router = Router()
logger = logging.getLogger(__name__)


async def check_admin_auth(target: Message | CallbackQuery, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    data = await state.get_data()
    if data.get('role') == 'admin':
        return True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
    if isinstance(target, CallbackQuery):
        await target.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
    else:
        await target.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return False


async def generate_and_send_report(message: Message, start_date: date, end_date: date):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ù–û–í–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    temp_msg = await message.answer("‚è≥ –ú–∏–Ω—É—Ç–∫—É, —Å–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...")

    order_count, total_sales = await get_sales_summary_for_period(start_date, end_date)
    sold_items_details = await get_sold_items_details_for_period(start_date, end_date)

    date_range_str = f"–∑–∞ <b>{start_date.strftime('%d.%m.%Y')}</b>" if start_date == end_date else f"—Å <b>{start_date.strftime('%d.%m.%Y')}</b> –ø–æ <b>{end_date.strftime('%d.%m.%Y')}</b>"
    response_text = f"üìä <b>–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º {date_range_str}:</b>\n\n"

    if order_count > 0:
        response_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{order_count}</b>\n"
        response_text += f"–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: <b>{total_sales:.2f} {CURRENCY_SYMBOL}</b>\n"
        avg_check = total_sales / order_count
        response_text += f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{avg_check:.2f} {CURRENCY_SYMBOL}</b>\n"
        if sold_items_details:
            response_text += "\n<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º:</b>\n"
            for item in sold_items_details:
                response_text += f"  - {html.quote(str(item['item_name']))}: {item['total_quantity_sold']} —à—Ç.\n"
    else:
        response_text += "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await temp_msg.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç—á–µ—Ç–æ–≤
    await message.answer(response_text, reply_markup=get_reports_menu_keyboard())


@router.message(F.text == REPORTS_MENU_TEXT, StateFilter(None))
async def reports_menu_entry(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤."""
    if not await check_admin_auth(message, state):
        return
    # –ó–¥–µ—Å—å –ù–ï –ù–£–ñ–ù–û –≤—ã–∑—ã–≤–∞—Ç—å state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –æ—Ç—á–µ—Ç:", reply_markup=get_reports_menu_keyboard())


@router.message(F.text.in_({SALES_TODAY_TEXT, SALES_YESTERDAY_TEXT}), StateFilter(None))
async def report_sales_today_or_yesterday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞."""
    if not await check_admin_auth(message, state):
        return

    target_date = date.today() if message.text == SALES_TODAY_TEXT else date.today() - timedelta(days=1)
    await generate_and_send_report(message, target_date, target_date)


@router.message(F.text == SALES_PERIOD_TEXT, StateFilter(None))
async def report_sales_period_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞."""
    if not await check_admin_auth(message, state):
        return
    await state.set_state(ReportStates.waiting_for_start_date)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–∞—á–∞–ª—å–Ω—É—é</b> –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:",
        reply_markup=await SimpleCalendar().start_calendar()
    )


@router.message(F.text == BACK_TO_ADMIN_MAIN_MENU_TEXT, StateFilter("*"))
async def back_to_admin_main_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –æ—Ç—á–µ—Ç–∞—Ö."""
    if not await check_admin_auth(message, state): return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    auth_data = await state.get_data()
    await state.clear()
    await state.set_data(auth_data)

    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_admin_menu_keyboard()
    )


async def process_date_selection(callback_query: CallbackQuery, selected_date: date, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    current_state_str = await state.get_state()
    message = callback_query.message

    if current_state_str == ReportStates.waiting_for_start_date:
        if selected_date > date.today():
            await callback_query.answer("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.", show_alert=True)
            # –Ø–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å—è
            await callback_query.message.edit_reply_markup(reply_markup=await SimpleCalendar().start_calendar())
            return

        await state.update_data(report_start_date=selected_date.isoformat())
        await state.set_state(ReportStates.waiting_for_end_date)
        await message.edit_text(
            f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: <b>{selected_date.strftime('%d.%m.%Y')}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–Ω–µ—á–Ω—É—é</b> –¥–∞—Ç—É:",
            reply_markup=await SimpleCalendar().start_calendar(year=selected_date.year, month=selected_date.month)
        )


    elif current_state_str == ReportStates.waiting_for_end_date:

        data = await state.get_data()

        start_date = date.fromisoformat(data.get("report_start_date"))

        if start_date > selected_date:
            await callback_query.answer("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.",
                                        show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ - –≤—ã–±–æ—Ä –ö–û–ù–ï–ß–ù–û–ô –¥–∞—Ç—ã
            await state.set_state(ReportStates.waiting_for_end_date)
            await callback_query.message.edit_text(
                f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: <b>{start_date.strftime('%d.%m.%Y')}</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–Ω–µ—á–Ω—É—é</b> –¥–∞—Ç—É:",
                reply_markup=await SimpleCalendar().start_calendar(year=start_date.year, month=start_date.month)
            )
            return

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ---

        auth_data = await state.get_data()

        await state.clear()

        await state.set_data(auth_data)

        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        await callback_query.message.delete()

        await generate_and_send_report(callback_query.message, start_date, selected_date)


@router.callback_query(SimpleCalendarCallback.filter(),
                       StateFilter(ReportStates.waiting_for_start_date, ReportStates.waiting_for_end_date))
async def process_calendar_action(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback,
                                  state: FSMContext):
    if not await check_admin_auth(callback_query, state): return

    # –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if callback_data.act == "CANCEL":
        auth_data = await state.get_data()
        await state.clear()
        await state.set_data(auth_data)
        await callback_query.message.edit_text("–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=None)
        await callback_query.message.answer("–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤:", reply_markup=get_reports_menu_keyboard())
        await callback_query.answer()
        return

    # --- –ù–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–û–ó–í–†–ê–©–ê–ï–ú –Ø–í–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£ TODAY ---
    if callback_data.act == "TODAY":
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        await process_date_selection(callback_query, date.today(), state)
        return
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    calendar = SimpleCalendar(show_alerts=True)
    try:
        selected, selected_date_obj = await calendar.process_selection(callback_query, callback_data)
        if selected:
            await process_date_selection(callback_query, selected_date_obj.date(), state)
    except TelegramBadRequest:
        await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—é.")
