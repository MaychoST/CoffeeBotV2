# main.py
import logging
from contextlib import asynccontextmanager

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
import redis.asyncio as redis
from aiogram.types import Update, BotCommand
from fastapi import FastAPI

from config import BOT_TOKEN, DATABASE_URL, REDIS_URL, REDIS_TOKEN
from handlers import (
    start_handler,
    order_handler,
    staff_handler,
    admin_menu_management_handler,
    report_handler,
    common_handler  # –û—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç, –Ω–æ –∏–∑–º–µ–Ω–∏–º –ø–æ—Ä—è–¥–æ–∫
)
from database import get_db_pool, close_db_pool, create_tables, _check_and_populate

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Redis —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
redis_client = redis.from_url(REDIS_URL, password=REDIS_TOKEN, decode_responses=True)

# –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
storage = RedisStorage(redis=redis_client)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

# --- –í–û–ó–í–†–ê–©–ê–ï–ú –°–¢–ê–†–´–ô, –†–ê–ë–û–ß–ò–ô –ü–û–†–Ø–î–û–ö –†–û–£–¢–ï–†–û–í ---
dp.include_router(admin_menu_management_handler.router)
dp.include_router(report_handler.router)
dp.include_router(order_handler.router)
dp.include_router(staff_handler.router)
# –í–ê–ñ–ù–û: common_handler –∏ start_handler –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ
dp.include_router(common_handler.router)
dp.include_router(start_handler.router)


async def set_main_menu(bot: Bot):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–Ω–∞ –Ω–µ –ª–æ–º–∞–µ—Ç –Ω–∏—á–µ–≥–æ
    main_menu_commands = [
        BotCommand(command="/start", description="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å / –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚öôÔ∏è"),
        BotCommand(command="/logout", description="–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã üö™"),
        BotCommand(command="/help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É ‚ùì"),
        BotCommand(command="/bug", description="–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ üêû")
    ]
    await bot.set_my_commands(main_menu_commands)
    logger.info("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã...")
    await set_main_menu(bot)
    await get_db_pool()
    await create_tables()
    await _check_and_populate()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ—Å—É—Ä—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    yield
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...")
    await close_db_pool()
    await bot.session.close()
    await dp.storage.close()
    logger.info("–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.")


app = FastAPI(lifespan=lifespan)


@app.post("/")
async def process_webhook(update: Update):
    await dp.feed_update(bot=bot, update=update)
    return {'status': 'ok'}
